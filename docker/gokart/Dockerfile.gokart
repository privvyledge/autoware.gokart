# Steps: Setup Jetpack[done], setup docker[done], setup nvidia-docker[done], clone Autoware,setup SDKs (Livox, Zed, VESC), Setup ROS2 Nav (nav2)
# See (https://github.com/stereolabs/zed-docker/issues/41) for tips on setting up as non-root user
# todo: setup particle filter
######################### Setup Docker container (Autoware or jetson-containers) with ROS
#FROM ghcr.io/autowarefoundation/autoware-universe:humble-latest-cuda-arm64
#FROM dustynv/ros:humble-desktop-pytorch-l4t-r35.4.1

FROM privvyledge/ros:humble-desktop-full-cuda-11-8

# Set up the shell
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ENV TZ=America/New_York

ARG L4T_MAJOR_VERSION="35"
ARG L4T_MINOR_VERSION="4"
ARG L4T_PATCH_VERSION="1"
ARG L4T_VERSION="${L4T_MAJOR_VERSION}.${L4T_MINOR_VERSION}.${L4T_PATCH_VERSION}"

ARG ZED_SDK_MAJOR="4"
ARG ZED_SDK_MINOR="0"

# Setup user
ARG USER=autoware
ARG USERNAME=${USER}
ENV USERNAME ${USERNAME}

ARG USER_UID=1000
ARG USER_GID=$USER_UID

RUN groupadd --gid $USER_GID $USERNAME && \
        useradd --uid $USER_UID --gid $USER_GID -m $USERNAME && \
        echo "$USERNAME:$USERNAME" | chpasswd && \
        usermod --shell /bin/bash $USERNAME && \
        usermod -aG sudo,video $USERNAME && \
        usermod  --uid $USER_UID $USERNAME && \
        echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/$USERNAME && \
        chmod 0440 /etc/sudoers.d/$USERNAME

# Setup env and shell
ENV LOGNAME root
ARG DEBIAN_FRONTEND=noninteractive
ARG DEBCONF_NONINTERACTIVE_SEEN=true

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
ENV TZ=America/New_York

ARG ROS_VERSION="ROS2"
ARG ROS_DISTRO="humble"
ENV ROS_DISTRO=${ROS_DISTRO}
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

ENV NVIDIA_DRIVER_CAPABILITIES all
ENV NVIDIA_VISIBLE_DEVICES all

# Install Sudo
RUN apt-get update && DEBIAN_FRONTEND="noninteractive" apt-get install -yq sudo tzdata && \
    ln -fns /usr/share/zoneinfo/${TZ} /etc/localtime && echo $TZ > /etc/timezone && \
    dpkg-reconfigure -f noninteractive tzdata

# Install packages
RUN sudo apt-get update -y && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    sudo \
    git \
    curl \
    wget \
    less \
    zstd \
    udev \
    unzip \
    build-essential \
    apt-transport-https \
    openssh-server libv4l-0 libv4l-dev v4l-utils binutils xz-utils bzip2 lbzip2 \
    ca-certificates libegl1 \
    lsb-release \
    gnupg2 \
    cmake \
    pkg-config \
    swig \
    g++ \
    libpython3-dev \
    python3-dev \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-numpy \
    python3-rosdep \
    python3-matplotlib \
#    python3-opencv \
    python3-pil \
    python3-yaml \
    python3-tk \
    python3-pyqt5 \
    python3-bloom \
#    libopencv-dev \
    libssl-dev \
    libusb-1.0-0-dev \
    libgtk-3-dev \
    libglfw3-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libgoogle-glog-dev \
    qtcreator \
    libunwind-dev \
    libgstreamer1.0-0 \
    gstreamer1.0-plugins-base \
    gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad \
    gstreamer1.0-plugins-ugly \
    gstreamer1.0-libav \
    gstreamer1.0-tools \
    gstreamer1.0-x \
    gstreamer1.0-alsa \
    gstreamer1.0-gl \
    gstreamer1.0-gtk3 \
    gstreamer1.0-qt5 \
    gstreamer1.0-pulseaudio \
    libglib2.0-dev \
    libgstrtspserver-1.0-dev \
    gstreamer1.0-rtsp && \
    sudo rm -rf /var/lib/apt/lists/*

# Set up "user" and environment variables. todo
#USER ${USERNAME}
#USER root

# Install Python Packages. Todo: add ultralytics, YOLOv8, YOLOv4, etc. dependencies
RUN python3 -m pip install do-mpc casadi

# Initialize directories
#ENV BUILD_HOME=$HOME/kart_ws
ENV BUILD_HOME=/kart_ws
ARG BUILD_HOME=$BUILD_HOME
RUN sudo mkdir -p "$BUILD_HOME/src" && sudo mkdir -p /sdks

WORKDIR $BUILD_HOME

#------------------------
# Setup TF2 and Geometry2
#------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-tf2-tools \
    ros-${ROS_DISTRO}-tf-transformations \
    ros-${ROS_DISTRO}-rqt-tf-tree \
    ros-${ROS_DISTRO}-tf2-geometry-msgs && \
    python3 -m pip install transforms3d numpy && \
    sudo rm -rf /var/lib/apt/lists/*

#------------------------
# Setup VESC and other related tools. Note for the VESC package use ros2 branch or ros2_imu_fix or ros2_motor_direction_fix
#------------------------
RUN cd "src" && git clone https://github.com/privvyledge/f1tenth_system.git && \
    cd f1tenth_system && git submodule update --init --force --remote && \
    cd vesc && git checkout ros2_motor_direction_fix

#----------------------------
# (Optional) Setup ROS Nav
#----------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-behaviortree-cpp-v3 \
    ros-${ROS_DISTRO}-nav2-msgs \
    ros-${ROS_DISTRO}-navigation2 \
    ros-${ROS_DISTRO}-nav2-bringup && \
    sudo rm -rf /var/lib/apt/lists/*
## RUN  sudo apt remove ros-humble-navigation2 ros-humble-nav2* && sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
##    ros-${ROS_DISTRO}-gazebo-ros-pkgs && \
##    cd "$BUILD_HOME/src" && git clone --recursive https://github.com/ros-planning/navigation2.git -b ${ROS_DISTRO} && \
##    sudo rm -rf /var/lib/apt/lists/*

#-------------------------------------------------
# Setup Spatio Temporal Voxel Layer (STVL) and other voxel packages for 3D occupancy representation.
#-------------------------------------------------
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#    ros-${ROS_DISTRO}-spatio-temporal-voxel-layer ros-${ROS_DISTRO}-nonpersistent-voxel-layer
RUN cd "${BUILD_HOME}/src" && \
    git clone -b ros2 https://github.com/SteveMacenski/spatio_temporal_voxel_layer.git && \
    git clone -b ros2 https://github.com/SteveMacenski/nonpersistent_voxel_layer.git


#----------------------------------------
# (Optional) Setup SLAM toolbox. Use galactic and above (or noetic) to get pose
#----------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-slam-toolbox && \
    sudo rm -rf /var/lib/apt/lists/*
# RUN cd "$BUILD_HOME/src" && git clone https://github.com/SteveMacenski/slam_toolbox.git -b ${ROS_DISTRO}-devel

#---------------------------------------
# (Optional) Setup Robot localization
#---------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-robot-localization && \
    sudo rm -rf /var/lib/apt/lists/*
# RUN cd "$BUILD_HOME/src" && git clone https://github.com/cra-ros-pkg/robot_localization.git -b ${ROS_DISTRO}-devel

#-----------------------------------------
#(Optional) Setup IMU Filters
#-----------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-imu-tools && \
    sudo rm -rf /var/lib/apt/lists/*

#################################################### Setup Autonomous bringup packages.
RUN cd "$BUILD_HOME/src" && git clone https://github.com/privvyledge/f1tenth_launch.git -b ${ROS_DISTRO}-dev && \
    git clone https://github.com/privvyledge/trajectory_following_ros2.git && \
    git clone https://github.com/privvyledge/f1tenth_autoware_launch_py.git

#-------------------------------------------------
# Setup Laser filters/pipeline.
#-------------------------------------------------
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends && \
#    ros-${ROS_DISTRO}-laser-pipeline ros-${ROS_DISTRO}-laser-filters  && \
#    rm -rf /var/lib/apt/lists/*
RUN cd "$BUILD_HOME/src" && sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends ros-${ROS_DISTRO}-filters && \
    git clone https://github.com/ros-perception/laser_filters.git -b ros2

#-------------------------------------------------
# Setup depth image to laser scan.
#-------------------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-depthimage-to-laserscan  && \
    sudo rm -rf /var/lib/apt/lists/*
# RUN #cd "$BUILD_HOME/src" && git clone https://github.com/ros-perception/depthimage_to_laserscan.git -b ros2

#################################################### Setup rf2o laser odometry
RUN cd "$BUILD_HOME/src" && git clone https://github.com/MAPIRlab/rf2o_laser_odometry.git

#################################################### Setup Image Proc (e.g PointClouds from depth or stereo images)
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-image-pipeline && \
    sudo rm -rf /var/lib/apt/lists/*

#-------------------------------------------------
# Setup other Go Kart packages
#-------------------------------------------------
RUN git clone https://github.com/privvyledge/AutoGoKart.git src/AutoGoKart

#-------------------------------------------------
# Setup MicroROS (https://github.com/micro-ROS/micro_ros_setup.git | https://micro.ros.org/docs/tutorials/core/first_application_linux/)
#-------------------------------------------------
RUN cd "${BUILD_HOME}/src" && git clone -b ${ROS_DISTRO} https://github.com/micro-ROS/micro_ros_setup.git micro_ros_setup && \
    python3 -m pip install pyserial

#-------------------------------------------------
# Setup Autoware.
#-------------------------------------------------
ARG AUTOWARE_DIR='src'
ARG AUTOWARE_FOLDER_NAME='autoware_gokart'
RUN cd "${BUILD_HOME}/src" && git clone -b gokart_devel https://github.com/privvyledge/autoware.gokart.git  && cd autoware.gokart && mkdir src && \
    vcs import src < autoware.repos  && \
    chmod +x install_autoware_dependencies.sh && ./install_autoware_dependencies.sh

WORKDIR /sdks

# Install Acados.
#ARCHITECTURES: "" (Recommended), ARMV8A_ARM_CORTEX_A57-TX2, Orin Nano, ARMV8A_ARM_CORTEX_A76-ORIN, X64_AUTOMATIC, GENERIC
# Could remove the -DBLASFEO_TARGET specification and should be automatically detected
ARG TX2_ARCHITECTURE=ARMV8A_ARM_CORTEX_A57
ARG ORIN_ARCHITECTURE=ARMV8A_ARM_CORTEX_A76
ARG ACADO_BLASFEO_TARGET_CPU_ARCHITECHTURE=${ORIN_ARCHITECTURE}
ARG ACADOS_OPENMP_PARALLELIZATION_ENABLED=ON
ARG ACADOS_NUM_THREADS=2
RUN mkdir -p "/sdks/" && cd "/sdks/" && \
    export ACADOS_ROOT='/sdks/acados' && export ACADOS_PATH=${ACADOS_ROOT} && export ACADOS_SOURCE_DIR=${ACADOS_ROOT} && \
    git clone https://github.com/acados/acados.git && cd acados && \
    git submodule update --recursive --init && \
    mkdir build && cd build && \
    cmake \
        -DACADOS_WITH_QPOASES=ON \
        -DACADOS_WITH_OSQP=ON \
        -DACADOS_INSTALL_DIR=${ACADOS_ROOT} \
#        -DBLASFEO_TARGET=${ACADO_BLASFEO_TARGET_CPU_ARCHITECHTURE} \
        -DCMAKE_BUILD_TYPE=release \
        -DACADOS_NUM_THREADS=${ACADOS_NUM_THREADS} \
        -DACADOS_WITH_OPENMP=${ACADOS_OPENMP_PARALLELIZATION_ENABLED} .. && \
    sudo make install -j$(nproc) && \
    python3 -m pip install -e ${ACADOS_ROOT}/interfaces/acados_template && \
#    curl https://sh.rustup.rs -sSf | sh -s -- -y && source $HOME/.cargo/env && \
    sudo apt update && sudo apt install -y rustc cargo && cd ../bin && \
    git clone https://github.com/acados/tera_renderer.git && cd tera_renderer && cargo build --verbose --release && \
    cp target/release/t_renderer ${ACADOS_ROOT}/bin

#-----------------------------
# Setup Zed Camera SDK (https://github.com/dusty-nv/jetson-containers/blob/master/packages/zed/Dockerfile | https://github.com/stereolabs/zed-docker/blob/master/4.X/l4t/py-devel/Dockerfile | https://www.stereolabs.com/docs/installation/jetson/ | https://www.stereolabs.com/docs/ros2/ )
#-----------------------------
RUN echo "# R${L4T_MAJOR_VERSION} (release), REVISION: ${L4T_MINOR_VERSION}.${L4T_PATCH_VERSION}" > /etc/nv_tegra_release ; \
    wget -q --no-check-certificate -O ZED_SDK_Linux.run https://download.stereolabs.com/zedsdk/${ZED_SDK_MAJOR}.${ZED_SDK_MINOR}/l4t${L4T_MAJOR_VERSION}.${L4T_MINOR_VERSION}/jetsons && \
    chmod +x ZED_SDK_Linux.run ; ./ZED_SDK_Linux.run silent skip_drivers && \
#    rm -rf /usr/local/zed/resources/* \
    rm -rf ZED_SDK_Linux.run && \
    rm -rf /var/lib/apt/lists/* && \
    sudo apt-get clean

## ZED Python API (use only if "skip_python" is passed to ./ZED_SDK_Linux.run)
#RUN wget download.stereolabs.com/zedsdk/pyzed -O /usr/local/zed/get_python_api.py && \
#    python3 /usr/local/zed/get_python_api.py && \
#    python3 -m pip install cython wheel && \
#    python3 -m pip install numpy pyopengl *.whl && \
#    rm *.whl ; rm -rf /var/lib/apt/lists/* && apt-get clean

#------------------------
# Setup Livox LIDAR SDK(https://github.com/Livox-SDK/Livox-SDK2 | https://github.com/Livox-SDK/Livox-SDK#43-connect-to-the-specific-lidar-units)
# https://github.com/privvyledge/livox_ros_driver2
#------------------------
RUN cd /sdks/ && git clone https://github.com/Livox-SDK/Livox-SDK2.git && \
    cd Livox-SDK2/ && mkdir build && cd build && cmake .. && make -j$(nproc) && sudo make install && \
    cd $BUILD_HOME && git clone https://github.com/privvyledge/livox_ros_driver2 src/livox_ros_driver2 && \
    cd src/livox_ros_driver2 && cp -f package_ROS2.xml package.xml && cp -rf launch_ROS2/ launch/

WORKDIR $BUILD_HOME

#------------------------
# Setup ZED ROS2 Wrapper
#------------------------
# zed-ros2-wrapper dependencies
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    libgeographic-dev  \
    ros-humble-geographic-info \
    ros-humble-nmea-msgs \
    ros-humble-robot-localization \
    ros-humble-xacro \
    && sudo rm -rf /var/lib/apt/lists/* \
    && sudo apt-get clean
RUN cd "$BUILD_HOME/src" && git clone --recursive https://github.com/stereolabs/zed-ros2-wrapper.git

#-------------------------------------------------
# Setup Mapping packages (LIO-SAM).
# Some packages to consider (https://autowarefoundation.github.io/autoware-documentation/main/how-to-guides/integrating-autoware/creating-maps/open-source-slam/)
# https://github.com/TixiaoShan/LIO-SAM/tree/ros2 (lidar, imu, gps)
# https://github.com/Ericsii/FAST_LIO (lidar, imu)
# https://github.com/rsasaki0109/lidarslam_ros2 (lidar, imu)
#-------------------------------------------------
# LIO_SAM
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    software-properties-common \
    ros-${ROS_DISTRO}-robot-state-publisher \
    ros-${ROS_DISTRO}-perception-pcl \
    ros-${ROS_DISTRO}-pcl-msgs \
    ros-${ROS_DISTRO}-vision-opencv \
    ros-${ROS_DISTRO}-xacro \
    && sudo add-apt-repository -y ppa:borglab/gtsam-release-4.1 \
    && sudo apt-get update \
    && sudo apt install -y --no-install-recommends libgtsam-dev libgtsam-unstable-dev \
    && sudo rm -rf /var/lib/apt/lists/*

RUN cd "$BUILD_HOME/src" && git clone --branch ros2 https://github.com/privvyledge/LIO-SAM.git

# FAST_LIO
RUN cd "$BUILD_HOME/src" && git clone https://github.com/Ericsii/FAST_LIO.git --recursive

# (todo: move installation of all files to the top to avoid redundancies)
# li_slam_ros2 (optionally supports 9-axis IMU)
RUN cd "$BUILD_HOME/src" && git clone --recursive https://github.com/rsasaki0109/li_slam_ros2 && \
    sudo apt-get update && \
    sudo apt install -y --no-install-recommends libgtsam-dev libgtsam-unstable-dev && \
    sudo rm -rf /var/lib/apt/lists/*

## (todo: remove. note that both li_slam_ros2 and lidarslam_ros2 cannot be in the same workspace)
## lidarslam_ros2 (optionally supports 9-axis IMU but might not work properly. Use li_slam_ros2 instead)
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#    ros-${ROS_DISTRO}-libg2o && \
#    cd "$BUILD_HOME/src" && git clone --recursive https://github.com/rsasaki0109/lidarslam_ros2 && \
#    sudo rm -rf /var/lib/apt/lists/*

##-------------------------------------------------
## Setup F1/10 Particle Filter. Removed libpython2.7
##-------------------------------------------------
## Install dependencies (removed language-pack-en-base python python-pexpect vulkan-utils libvulkan1). Todo: remove
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -qq -y --no-install-recommends \
#    bc bzip2 can-utils freeglut3-dev gstreamer1.0-alsa \
#    gstreamer1.0-libav gstreamer1.0-plugins-bad gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
#    gstreamer1.0-plugins-ugly gstreamer1.0-tools gnupg2 \
#    i2c-tools iw kbd libcanberra-gtk3-module libgles2 libglu1-mesa-dev libglvnd-dev \
#    libgtk-3-0 libpython2.7 libudev1  libzmq5 mtd-utils parted pciutils \
#    python3-distutils sox udev wget vim git wireless-tools wpasupplicant && \
#    sudo rm -rf /var/lib/apt/lists/* && sudo apt-get clean
#
#RUN echo "/usr/lib/aarch64-linux-gnu/tegra" >> /etc/ld.so.conf.d/nvidia-tegra.conf && \
#    echo "/usr/lib/aarch64-linux-gnu/tegra-egl" >> /etc/ld.so.conf.d/nvidia-tegra.conf
#
#RUN sudo rm /usr/share/glvnd/egl_vendor.d/50_mesa.json && \
#    mkdir -p /usr/share/glvnd/egl_vendor.d/ && \
#    echo '{    "file_format_version" : "1.0.0",    "ICD" : {        "library_path" : "libEGL_nvidia.so.0"    }}' > /usr/share/glvnd/egl_vendor.d/10_nvidia.json
#
## Install gcc-8 and g++-8 for Ubuntu 22.04 and above
#RUN sudo apt-get update && mkdir -p /sdks/gcc && cd /sdks/gcc && \
#    wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8_8.4.0-3ubuntu2_amd64.deb && \
#    wget http://mirrors.edge.kernel.org/ubuntu/pool/universe/g/gcc-8/gcc-8-base_8.4.0-3ubuntu2_amd64.deb && \
#    wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb && \
#    wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/cpp-8_8.4.0-3ubuntu2_amd64.deb && \
#    wget http://mirrors.kernel.org/ubuntu/pool/universe/g/gcc-8/libmpx2_8.4.0-3ubuntu2_amd64.deb && \
#    wget http://mirrors.kernel.org/ubuntu/pool/main/i/isl/libisl22_0.22.1-1_amd64.deb && \
#    sudo apt install ./libisl22_0.22.1-1_amd64.deb ./libmpx2_8.4.0-3ubuntu2_amd64.deb ./cpp-8_8.4.0-3ubuntu2_amd64.deb ./libgcc-8-dev_8.4.0-3ubuntu2_amd64.deb ./gcc-8-base_8.4.0-3ubuntu2_amd64.deb ./gcc-8_8.4.0-3ubuntu2_amd64.deb
#
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -qq -y --no-install-recommends \
#    gcc-8 g++-8 && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 8 \
#    && update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-8 8 && sudo rm -rf /var/lib/apt/lists/*
#
## Compile rangelibc without CUDA. and install particle_filter package. Todo: ./compile_with_cuda.sh instead
#RUN python3 -m pip install cython && cd /sdks && git clone https://github.com/f1tenth/range_libc.git && \
#    cd range_libc &&  git checkout foxy-devel && cd pywrapper && ./compile.sh && \
#    cd "$BUILD_HOME/src" && git clone https://github.com/f1tenth/particle_filter.git && \
#    cd particle_filter && git checkout ${ROS_DISTRO}-devel

#-------------------------------------------------
# Setup RTAB-Map (which also publishes odometry from laser_scan)
#-------------------------------------------------
#RUN cd "$BUILD_HOME/src" && git clone https://github.com/introlab/rtabmap_ros.git -b ${ROS_DISTRO}-devel
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-rtabmap-ros ros-${ROS_DISTRO}-grid-map-rviz-plugin && \
    sudo rm -rf /var/lib/apt/lists/*

#----------------------------------------------
# Install ROSBag support
#----------------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-ros2bag ros-${ROS_DISTRO}-rosbag2* && \
    sudo rm -rf /var/lib/apt/lists/*

#----------------------------------------------
# Install Cyclone DDS
#----------------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-rmw-cyclonedds-cpp && \
    sudo rm -rf /var/lib/apt/lists/*

##----------------------------------------------
## Setup Dualshock 4 ROS image. Make sure to setup the drivers on the host. (optional)
##----------------------------------------------
#RUN cd /sdks/ && git clone https://github.com/naoki-mizuno/ds4drv --branch devel \
#    && cd ds4drv \
#    && python3 setup.py install
#RUN cd ${BUILD_HOME}/src && git clone https://github.com/naoki-mizuno/ds4_driver.git

#----------------------------------------------
# YOLOv8 nodes. todo: verify if downloading Arial.ttf* is necessary
# Note that downgrading numpy might cause issues with other python packages, i.e onnxruntime-gpu and tensorflow as they require higher numpy versions. Could use a pytorch only base image instead.

# To export to tensorrt
# Using the command line:
# Using python: python3 -c "from ultralytics import YOLO;model = YOLO('yolov8s.pt');model.export(format='engine', half=True, simplify=True)"

# YOLOv8 ROS Usage. todo: put in launch files:
# images only
# ros2 launch ultralytics_ros tracker.launch.xml debug:=false input_topic:=/camera/camera/color/image_raw yolo_model:=yolov8m-seg.pt
# ros2 launch yolov8_bringup yolov8.launch.py model:=yolov8m-seg.pt input_image_topic:=/camera/camera/color/image_raw # or yolov9
# 3D
# ros2 launch ultralytics_ros tracker_with_cloud.launch.xml debug:=false input_topic:=/camera/camera/color/image_raw yolo_model:=yolov8m-seg.pt camera_info_topic:=/camera/camera/color/camera_info lidar_topic:=/camera/camera/depth/color/points yolo_result_topic:=/yolo/realsense/rgb yolo_3d_result_topic:=/yolo/realsense_3d_result cluster_tolerance:=0.3  voxel_leaf_size:=0.1 min_cluster_size:=100 max_cluster_size:=10000
# ros2 launch yolov8_bringup yolov8_3d.launch.py model:=yolov8m-seg.pt input_image_topic:=/camera/camera/color/image_raw input_depth_topic:=/camera/camera/depth/image_rect_raw input_depth_info_topic:=/camera/camera/depth/camera_info target_frame:=camera_link
#----------------------------------------------
## Install ultralytics
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#    git-lfs gcc git zip curl htop libgl1 libglib2.0-0 libpython3-dev gnupg g++ libusb-1.0-0 && \
#    mkdir -p /root/.config/Ultralytics && cd /root/.config/Ultralytics && wget https://github.com/ultralytics/assets/releases/download/v0.0.0/Arial.ttf && wget https://github.com/ultralytics/assets/releases/download/v0.0.0/Arial.Unicode.ttf && \
#    cd /sdks && git clone https://github.com/ultralytics/ultralytics && \
#    cd ultralytics &&  grep -v "opencv-python" pyproject.toml > temp.toml && mv temp.toml pyproject.toml && \
#    python3 -m pip install --upgrade pip wheel && \
#    python3 -m pip install lap==0.4.0 numpy==1.23.5 typing-extensions>=4.4.0 Bottleneck==1.3.4 onnxsim>=0.4.33 && \
#    cd /sdks/ultralytics/ && pip install --no-cache -e . && \
##    export OMP_NUM_THREADS=1 && \
#    cd ${BUILD_HOME}/src && GIT_LFS_SKIP_SMUDGE=1 git clone -b humble-devel https://github.com/Alpaca-zip/ultralytics_ros.git && \
#    git clone https://github.com/mgonzs13/yolov8_ros.git && \
#    sudo rm -rf /var/lib/apt/lists/* \

#----------------------------------------------
# Install Apriltag
#----------------------------------------------
RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
    ros-${ROS_DISTRO}-apriltag && \
    sudo rm -rf /var/lib/apt/lists/*

#-----------------------------------------------
# Install/build Open3D (https://www.open3d.org/docs/release/arm.html). Doesn't work in dusty-nv container but works in Nvidia Isaac ROS container.
# To build, see https://www.open3d.org/docs/release/arm.html#building-open3d-python-wheel-with-docker
#-----------------------------------------------
#RUN python3 -m pip install open3d
RUN sudo apt update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends python3-open3d

#-----------------------------------------------
# Install Extra dependencies, e.g tensorrt-cmake, cudnn-cmake,
#-----------------------------------------------
#RUN sudo apt update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#    ros-${ROS_DISTRO}-cudnn-cmake-module ros-${ROS_DISTRO}-tensorrt-cmake-module && \
#    ros-${ROS_DISTRO}-ackermann-msgs ros-${ROS_DISTRO}-joy && \
# #   libpcl-dev ros-${ROS_DISTRO}-perception-pcl ros-${ROS_DISTRO}-pcl-msgs  ros-${ROS_DISTRO}-pcl-conversions && \
#    sudo rm -rf /var/lib/apt/lists/*


##--------------------------------
## Setup NVIDIA Isaac packages.
##--------------------------------
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#    python3-distutils \
#    bc \
#    libboost-all-dev \
#    libboost-dev \
#    libpcl-dev \
#    libode-dev \
#    libgeographic-dev \
#    lcov \
#    python3-zmq \
#    libxaw7-dev \
#    libgraphicsmagick++1-dev \
#    graphicsmagick-libmagick-dev-compat \
#    libceres-dev \
#    libsuitesparse-dev \
#    libncurses5-dev \
#    libassimp-dev \
#    libyaml-cpp-dev \
#    libpcap-dev \
#    && sudo rm -rf /var/lib/apt/lists/* \
#    && sudo apt-get clean
#
##-------------------------------------------------
## Setup Spatio Temporal Voxel Layer (STVL) and other voxel packages for 3D occupancy representation.
##-------------------------------------------------
##RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
##    ros-${ROS_DISTRO}-spatio-temporal-voxel-layer ros-${ROS_DISTRO}-nonpersistent-voxel-layer
## Install spatio_temporal_voxel_layer dependencies
#RUN sudo apt-get update && DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#	libopenvdb-dev \
#	libopenvdb6.2 \
#	libopenexr-dev \
#    ros-humble-nav2-costmap-2d \
#	ros-humble-pcl-conversions \
#    ros-humble-twist-mux \
#    ros-humble-joy-linux \
#    ros-humble-teleop-twist-joy \
#    ros-humble-nav2* \
#    ros-humble-nav2-bringup \
#    ros-humble-geographic-msgs \
#    && sudo rm -rf /var/lib/apt/lists/* \
#    && sudo apt-get clean
#
#RUN cd "${BUILD_HOME}/src" && \
#    git clone -b ros2 https://github.com/SteveMacenski/nonpersistent_voxel_layer.git && \
#    sudo apt-get update && \
##    mkdir -p ${ROS_ROOT}/src && cd ${ROS_ROOT}/src && \
#    git clone -b ros2 https://github.com/SteveMacenski/spatio_temporal_voxel_layer.git && \
#    cd spatio_temporal_voxel_layer && git checkout 6ade4fe4164576d4356ca92b1cd258c71930b1f4 && \
#    source ${ROS_ROOT}/setup.bash \
##    && bloom-generate rosdebian && sed -i 's/nav2-costmap-2d/ros-humble-nav2-costmap-2d/g' debian/rules && fakeroot debian/rules binary \
##    && cd ../ && sudo apt-get install -y ./*.deb && rm ./*.deb \
#    && sudo rm -rf /var/lib/apt/lists/* \
#    && sudo apt-get clean

## Todo: Add Nvidia Isaac ROS repositories
#RUN cd ${BUILD_HOME}/src && git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common.git
#RUN cd ${BUILD_HOME}/src && sudo apt-get update &&  DEBIAN_FRONTEND="noninteractive" sudo apt-get install -y --no-install-recommends \
#    ros-humble-isaac-ros-common ros-humble-isaac-ros-visual-slam &&  \
#    git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_common.git && \
#    git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_visual_slam.git && \
#    git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_nitros.git && \
#    git clone https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_nitros_bridge.git && \
#    git clone --recurse-submodules https://github.com/NVIDIA-ISAAC-ROS/isaac_ros_nvblox.git && \
#    cd isaac_ros_nvblox && git lfs pull

#-------------------------------------------------
# Add symbolic links
#-------------------------------------------------
#This symbolic link is needed to use the streaming features on Jetson inside a container
RUN ln -sf /usr/lib/aarch64-linux-gnu/tegra/libv4l2.so.0 /usr/lib/aarch64-linux-gnu/libv4l2.so

#--------------------------------
# Build ROS workspace
# The -DROS_EDITION and -DHUMBLE_ROS flags are for LIVOX LIDAR
# The '--event-handlers console_direct+ --base-paths',  ' -DCMAKE_LIBRARY_PATH' and ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"' flags are needed by ZED
# The ' -DCMAKE_BUILD_TYPE=Release' flag is for all of them, especially Autoware
#--------------------------------
# Silence setup.py and easy_install deprecation warnings caused by colcon and setuptools (https://github.com/colcon/colcon-core/issues/454#issuecomment-1142649390)
ENV PYTHONWARNINGS=ignore:::setuptools.command.install,ignore:::setuptools.command.easy_install,ignore:::pkg_resources

WORKDIR $BUILD_HOME
ARG SKIPPED_ROSDEP_KEYS="cmake_modules pacmod3_msgs  python3-open3d \
    librealsense2 realsense2_camera libopencv-dev  libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv"

#ARG SKIPPED_ROSDEP_KEYS="cmake_modules pacmod3_msgs  python3-open3d \
#    librealsense2 realsense2_camera libopencv-dev  libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv \
#    libpcl-all-dev libpcl-all pcl_conversions pcl_ros perception_pcl  \
#    libpcl-common libpcl-io libpcl-features libpcl-segmentation libpcl-surface  python3-open3d nvblox"

RUN sudo apt update && \
    rosdep update && \
    source /opt/ros/${ROS_DISTRO}/setup.bash && \
    rosdep install --from-paths src --ignore-src -r -y -q --os=ubuntu:jammy --rosdistro=humble --skip-keys "${SKIPPED_ROSDEP_KEYS}"

RUN source /opt/ros/${ROS_DISTRO}/setup.bash && \
    colcon build --symlink-install --event-handlers console_direct+ --base-paths src --cmake-args '  -Wno-dev' ' --no-warn-unused-cli' ' -DBUILD_ACCELERATE_GPU_WITH_GLSL=ON' ' -DCMAKE_BUILD_TYPE=Release' ' -DCMAKE_EXPORT_COMPILE_COMMANDS=ON' ' -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs' ' -DCMAKE_CXX_FLAGS="-Wl,--allow-shlib-undefined"' ' -DDOWNLOAD_ARTIFACTS=ON' -DROS_EDITION=${ROS_VERSION} -DHUMBLE_ROS=${ROS_DISTRO}

#-----------------------------
# Setup microros agent, i.e create_agent_ws, then build_agent. Modified to skip rosdep keys and specify colcon build arguments
#-----------------------------
RUN bash -c 'source install/setup.bash; \
             EXTERNAL_SKIP=${SKIPPED_ROSDEP_KEYS}; \
             ros2 run micro_ros_setup create_agent_ws.sh; \
             ros2 run micro_ros_setup build_agent.sh'

#-----------------------------
# Setup environment variables
#-----------------------------
# Todo: use ENV to modify PATHs, e.g PATH, PYTHONPATH, LD_LIBRARY_PATH
# Todo: add autoware environment variables like vehicle_id
RUN echo 'alias build="colcon build --symlink-install  --event-handlers console_direct+"' >> ~/.bashrc && \
    echo 'alias run="ros2 launch zed_wrapper zed2i.launch.py"' >> ~/.bashrc && \
    echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> ~/.bashrc && \
    echo "source ${BUILD_HOME}/install/setup.bash" >> ~/.bashrc && \
    echo "export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp" >> ~/.bashrc && \
#    echo "export RMW_IMPLEMENTATION=rmw_fastrtps_cpp" >> ~/.bashrc && \
    echo "export CYCLONEDDS_URI=file://$BUILD_HOME/src/autoware.gokart/cyclone_dds/cyclonedds_config.xml" >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/targets/aarch64-linux/lib/stubs:/opt/ros/${ROS_DISTRO}/install/lib' >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib' >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/cuda/lib64:/usr/local/cuda/extras/CUPTI/lib64' >> ~/.bashrc && \
#    echo 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/lib/aarch64-linux-gnu/tegra' >> ~/.bashrc && \  # causes libgl issues
    echo 'export PATH=${PATH}:/usr/local/cuda/bin' >> ~/.bashrc && \
    echo 'CUDACXX=/usr/local/cuda/bin/nvcc' >> ~/.bashrc && \
    echo 'export ACADOS_ROOT=/sdks/acados' >> ~/.bashrc && \
    echo 'export ACADOS_PATH=${ACADOS_ROOT}' >> ~/.bashrc && \
    echo 'export ACADOS_SOURCE_DIR=${ACADOS_ROOT}' >> ~/.bashrc && \
    echo 'export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${ACADOS_ROOT}/lib' >> ~/.bashrc && \
    echo "export CCACHE_DIR=/ccache" >> ~/.bashrc  && \
    echo "export CC='/usr/lib/ccache/gcc'" >> ~/.bashrc  && \
    echo "export CXX='/usr/lib/ccache/g++'" >> ~/.bashrc  && \
    echo "export RCUTILS_COLORIZED_OUTPUT=1" >> ~/.bashrc && \
    echo 'export RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"' >> ~/.bashrc && \
    echo "source /usr/share/colcon_cd/function/colcon_cd.sh" >> ~/.bashrc && \
    echo "export _colcon_cd_root=${ROS_ROOT}" >> ~/.bashrc && \
    echo "source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash" >> ~/.bashrc

## RUN ros2 doctor # run this if the LIDAR doesn't run (https://github.com/YDLIDAR/ydlidar_ros2_driver/issues/10)

## Todo: remove the lines below in Release/production version
RUN sudo apt update && sudo apt install gedit cheese nautilus net-tools iputils-ping -y